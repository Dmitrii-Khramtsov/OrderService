# github.com/Dmitrii-Khramtsov/orderservice/docker-compose.yml
networks:
  app-network:
    driver: bridge

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_PORT_NUMBER: 2181
    ports:
      - "2181:2181"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      # Настройки для работы с Zookeeper
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_NUM_PARTITIONS: 1
    ports:
      - "9092:9092"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: orders
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders -d orders"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  app:
    build: .
    container_name: app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT: ${SERVER_PORT:-8081}
      POSTGRES_DSN: ${POSTGRES_DSN:-postgres://orders:orders@postgres:5432/orders?sslmode=disable}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-orders}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-orderservice}
      LOG_MODE: ${LOG_MODE:-development}
    restart: unless-stopped
    networks:
      - app-network

  script:
    build:
      context: .
      dockerfile: Dockerfile.script
    container_name: script
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-orders}
      NUMBER_OF_MESSAGES: ${NUMBER_OF_MESSAGES:-10}
      DELAY_MS: ${DELAY_MS:-500}
    restart: "no"
    networks:
      - app-network

volumes:
  postgres_data:
